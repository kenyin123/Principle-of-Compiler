CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
INTCON 2
COMMA ,
IDENFR judge
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
CHARTK char
IDENFR yes
ASSIGN =
CHARCON y
COMMA ,
IDENFR no
ASSIGN =
CHARCON n
SEMICN ;
INTTK int
IDENFR varn
SEMICN ;
CHARTK char
IDENFR varc
SEMICN ;
INTTK int
IDENFR test2
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 2
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR test3
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR test5
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR yes
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR testprint_0
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR num
COMMA ,
IDENFR numb
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
CHARTK char
IDENFR ch
COMMA ,
IDENFR chl
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR n
GRE >
IDENFR judge
RPARENT )
LBRACE {
IDENFR num
ASSIGN =
IDENFR n
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON num=
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
IDENFR numb
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
MINU -
IDENFR a
PLUS +
IDENFR b
MULT *
IDENFR a
PLUS +
IDENFR b
DIV /
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON numb[1]=
COMMA ,
IDENFR numb
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR ch
ASSIGN =
CHARCON a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON ch=
COMMA ,
IDENFR ch
RPARENT )
SEMICN ;
IDENFR chl
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR no
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON chl[1]=
COMMA ,
IDENFR chl
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR test4
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR n
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR c
ASSIGN =
INTCON 20
COMMA ,
IDENFR d
ASSIGN =
INTCON 30
SEMICN ;
CONSTTK const
CHARTK char
IDENFR e
ASSIGN =
CHARCON a
COMMA ,
IDENFR f
ASSIGN =
CHARCON b
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR n
COMMA ,
IDENFR k
LBRACK [
INTCON 200
RBRACK ]
SEMICN ;
CHARTK char
IDENFR g
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR n
COMMA ,
IDENFR g
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR g
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 200
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR k
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 200
RPARENT )
LBRACE {
IDENFR k
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON e=
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON f=
COMMA ,
IDENFR f
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR f
MINU -
IDENFR e
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON num=
COMMA ,
IDENFR k
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR g
MINU -
CHARCON a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON num=
COMMA ,
IDENFR k
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON c=
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON k[n]=
COMMA ,
IDENFR k
LBRACK [
IDENFR n
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON k[d-c+n*n]=
COMMA ,
IDENFR k
LBRACK [
IDENFR d
MINU -
IDENFR c
PLUS +
IDENFR n
MULT *
IDENFR n
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
DOTK do
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR k
LBRACK [
IDENFR j
RBRACK ]
RPARENT )
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR j
LSS <
IDENFR judge
RPARENT )
IFTK if
LPARENT (
IDENFR k
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON k[1]=
COMMA ,
IDENFR k
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR k
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON k[0]=
COMMA ,
IDENFR k
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
GRE >
IDENFR d
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON c == d
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR c
NEQ !=
IDENFR d
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON c != d
RPARENT )
SEMICN ;
RBRACE }
IDENFR testprint_0
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON inchar=
COMMA ,
IDENFR test3
LPARENT (
IDENFR g
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON result=
COMMA ,
IDENFR test4
LPARENT (
IDENFR n
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }